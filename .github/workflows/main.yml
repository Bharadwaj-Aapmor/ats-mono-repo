name: Build and Deploy to Kubernetes

on:
  push:
    branches: [devops]

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and Push Backend
        run: |
          docker build -t ${{ secrets.ECR_BACKEND_REPO }} ./backend
          docker push ${{ secrets.ECR_BACKEND_REPO }}

      - name: Build and Push Frontend
        run: |
          docker build -t ${{ secrets.ECR_FRONTEND_REPO }} ./frontend
          docker push ${{ secrets.ECR_FRONTEND_REPO }}

  deploy:
    name: Deploy to Kubernetes from EC2
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to Kubernetes via EC2 terminal
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.K8S_HOST }}
          username: ${{ secrets.K8S_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Configure AWS CLI on EC2
            aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws configure set region ${{ secrets.AWS_REGION }}

            # Login to ECR from EC2
            aws ecr get-login-password | docker login --username AWS --password-stdin $ECR_BACKEND_REPO
            aws ecr get-login-password | docker login --username AWS --password-stdin $ECR_FRONTEND_REPO

            # Pull latest Docker images
            docker pull $ECR_BACKEND_REPO:latest
            docker pull $ECR_FRONTEND_REPO:latest

            # Write backend.env to file from GitHub Secrets
            echo "${{ secrets.BACKEND_ENV_FILE }}" > backend.env

            # Create or update Kubernetes Secret from .env file
            kubectl delete secret backend-env --ignore-not-found
            kubectl create secret generic backend-env --from-env-file=backend.env

            # Replace image placeholders in Kubernetes manifests
            sed -i "s|__BACKEND_IMAGE__|$ECR_BACKEND_REPO:latest|g" k8s/backend-deployment.yaml
            sed -i "s|__FRONTEND_IMAGE__|$ECR_FRONTEND_REPO:latest|g" k8s/frontend-deployment.yaml

            # Apply Kubernetes manifests
            kubectl apply -f k8s/backend-deployment.yaml
            kubectl apply -f k8s/backend-service.yaml
            kubectl apply -f k8s/frontend-deployment.yaml
            kubectl apply -f k8s/frontend-service.yaml

            # Cleanup Docker on EC2
            docker container prune -f
            docker image prune -af --filter "until=24h"
